<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
		 xmlns:s="library://ns.adobe.com/flex/spark"
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 xmlns:handles="coopci.wysiwyg.handles.*"
		 width="400" height="300"  initialize="group1_initializeHandler(event)" 
		 render="group1_renderHandler(event)" 
		 addedToStage="group1_addedToStageHandler(event)">
	<fx:Script>
		<![CDATA[
			import coopci.wysiwyg.handles.*;
			
			import mx.events.FlexEvent;
			
			public function drawBorderLines():void {
				
				
				
				this.graphics.clear();
				this.graphics.lineStyle(3,0x00ff00);
				
				this.graphics.moveTo( 0 , 0 )
				this.graphics.lineTo( this.width , 0 );
				this.graphics.lineTo( this.width , this.height );
				this.graphics.lineTo( 0 , this.height );
				this.graphics.lineTo( 0 , 0 );
				
				
				this.graphics.lineStyle(1,0xff0000);
				this.graphics.moveTo( this.handleLeft.x , 0 )
				this.graphics.lineTo( this.handleRight.x , 0 );
				this.graphics.lineTo( this.handleRight.x , this.height );
				this.graphics.lineTo( this.handleLeft.x  , this.height );
				this.graphics.lineTo( this.handleLeft.x  , 0);
				
			}
			public var minDesignWidth:int = 15;
			public var minDesignHeight:int = 15;
			
			public var minStageX:int = -1;
			public var maxStageX:int = -1;
			public var minStageY:int = -1;
			public var maxStageY:int = -1;
			
			
			
			private function _restrict_handles():void{
				
				var global_pos:Point = this.localToGlobal( new Point(0 , 0 ) );
				
				this.handleLeft.minStageX = -1;
				this.handleLeft.maxStageX = global_pos.x + this.width - this.minDesignWidth;
				
				this.handleRight.minStageX = global_pos.x +  this.minDesignWidth;
				this.handleRight.maxStageX = -1;
				
				
				if (this.minStageX >= 0){
					this.handleLeft.minStageX = this.minStageX;
					this.handleMover.minStageX = this.minStageX;// + this.handleMover.x ;
				}
				if (this.maxStageX >= 0){
					this.handleRight.maxStageX = this.maxStageX + this.handleRight.width;
					this.handleMover.maxStageX = this.maxStageX;// - (this.width - this.handleMover.x - this.handleMover.width);
				}
				
			}
			
			
			public function place_handles():void{
				this._place_handles();
			}
			private function _place_handles():void{
				this.handleRight.enableY = false;
				this.handleRight.enableX = true;
				this.handleRight.x = this.width;
				this.handleRight.y = this.height / 2;
				//this.handleRight.restrictDesignWidth = false;
				
				this.handleLeft.enableY = false;
				this.handleLeft.enableX = true;
				this.handleLeft.x = 0;
				this.handleLeft.y = this.height / 2;
				
				this.handleMover.enableY = false;
				this.handleMover.enableX = true;
				this.handleMover.x = 0;
				this.handleMover.y = 0;
				this.handleMover.height = 12;
				this.handleMover.width = this.width;
			
				this._restrict_handles();
			}
			protected function group1_initializeHandler(event:FlexEvent):void
			{
				
				
				this.handleLeft.addEventListener( HandleEvent.MOVE_PROGRESS , this.on_left_handle_move_progress);
				this.handleRight.addEventListener( HandleEvent.MOVE_PROGRESS , this.on_right_handle_move_progress);
				
				this.handleLeft.addEventListener( HandleEvent.MOVE_END , this.on_left_handle_move_end);
				this.handleRight.addEventListener( HandleEvent.MOVE_END , this.on_right_handle_move_end);
				
				
				this.handleLeft.addEventListener( HandleEvent.MOVE_BEGIN , this.on_left_handle_move_begin);
				
		
				this.handleMover.addEventListener( HandleEvent.MOVE_BEGIN , this.on_mover_handle_move_begin);
				this.handleMover.addEventListener( HandleEvent.MOVE_PROGRESS , this.on_mover_handle_move_progress);
				this.handleMover.addEventListener( HandleEvent.MOVE_END , this.on_mover_handle_move_end);
				this.handleMover.addEventListener( MouseEvent.DOUBLE_CLICK , this.on_mover_handle_dbclick);
				
				
				return;
			}
			
			private function on_stage_click(event:Event):void
			{
				var localmousecoord:Point = this.globalToLocal( new Point( stage.mouseX , stage.mouseY ) );
				
				if ( localmousecoord.x < 0){
					this.restore();
					return;
				}
				if ( localmousecoord.x > this.width){
					this.restore();
					return;
				}
				
				if ( localmousecoord.y < 0){
					this.restore();
					return;
				}
				if ( localmousecoord.y > this.height){
					this.restore();
					return;
				}
				
				return;
				
			}
			
			private  var _originalSelfX:int = 0;
			private var _originalSelfY:int = 0;
			private function on_left_handle_move_begin(event:Event):void
			{
				_originalSelfX = this.x;
			}
			
			private function on_top_handle_move_begin(event:Event):void
			{
				_originalSelfY = this.y;
			}
			
			private function on_right_handle_move_progress(event:Event):void
			{
				var e:HandleEvent = event as HandleEvent;
			}
			
			private function on_left_handle_move_progress(event:Event):void
			{
				var e:HandleEvent = event as HandleEvent;
			}
			
			
			
			private function on_mover_handle_dbclick(event:Event):void
			{
				trace("on_mover_handle_dbclick");
				var handle:DesignHandle = null;
				handle = this.handleMover; 
				this.removeElement( handle );
				this.addElementAt( handle , 0);
				
			}
			
			public function restore():void{
				var handle:DesignHandle = null;
				handle = this.handleMover; 
				this.removeElement( handle );
				this.addElementAt( handle , this.numElements );
			
				
				handle = this.handleLeft;
				this.removeElement( handle );
				this.addElementAt( handle  , this.numElements);
				
				handle = this.handleRight;
				this.removeElement( handle );
				this.addElementAt( handle  , this.numElements);
				
			}
			
			
			private var _originalX:int = 0;
			private var _originalY:int = 0;
			private function on_mover_handle_move_begin(event:Event):void
			{
				var e:HandleEvent = event as HandleEvent;
				
				_originalX = this.x ;
				_originalY = this.y ;
			}
			
			private function on_mover_handle_move_progress(event:Event):void
			{
				var e:HandleEvent = event as HandleEvent;
				var deltaX:Number = this.handleMover.getRestrictedDeltaX();
				var deltaY:Number = this.handleMover.getRestrictedDeltaY();
				this.x = _originalX + deltaX;
				this.y = _originalY + deltaY;
				
				this.handleMover.x = 0;
				this.handleMover.y = 0;
				
			}
			
			private function on_mover_handle_move_end(event:Event):void
			{
				var e:HandleEvent = event as HandleEvent;
				this._place_handles();
				
				this.dispatchEvent( new DesignControlDimensionEvent (DesignControlDimensionEvent.DIMENSION_CHANGED) );
				
			}
			
			
			private function _on_handles_move_end():void{
				var deltaX:int = this.handleLeft.x;
				
				
				var newWidth:int = this.handleRight.x - this.handleLeft.x ;
				
				this.x += deltaX;
				this.width = newWidth;
				
				
				this.handleLeft.x = 0;
			
			}
			private function on_right_handle_move_end(event:Event):void
			{
				var e:HandleEvent = event as HandleEvent;
				this.width = this.handleRight.x;
				this._place_handles();
				this.dispatchEvent( new DesignControlDimensionEvent (DesignControlDimensionEvent.DIMENSION_CHANGED) );
			}
			
			private function on_left_handle_move_end(event:Event):void
			{
				var e:HandleEvent = event as HandleEvent;
				
				
				var newWidth:int = this.handleRight.x - this.handleLeft.x;
				this.x += this.handleLeft.x;
				this.width = newWidth;
				this.handleRight.x = newWidth;
				this.handleLeft.x = 0;
				
				this._place_handles();
				
				this.dispatchEvent( new DesignControlDimensionEvent (DesignControlDimensionEvent.DIMENSION_CHANGED) );
				
			}
			
			
			
			
			protected function group1_renderHandler(event:Event):void
			{
				drawBorderLines();
				
			}
			
			protected function group1_addedToStageHandler(event:Event):void
			{
				this._place_handles();
				stage.addEventListener( MouseEvent.CLICK , this.on_stage_click);
				
				stage.invalidate();
			}
			
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<handles:DesignHandleMover id="handleMover" top="0" horizontalCenter="0"/>
	<handles:DesignHandleLeft id="handleLeft" x="0" verticalCenter="0"/>
	<handles:DesignHandleRight id="handleRight" x="330" width="100" height="30" verticalCenter="0"/>
	
</s:Group>
