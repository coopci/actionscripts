<?xml version="1.0" encoding="utf-8"?>
<s:Button xmlns:fx="http://ns.adobe.com/mxml/2009"
		  xmlns:s="library://ns.adobe.com/flex/spark"
		  xmlns:mx="library://ns.adobe.com/flex/mx"
		  width="3" height="3" mouseDown="button1_mouseDownHandler(event)"
		  mouseOut="button1_mouseOutHandler(event)" mouseOver="button1_mouseOverHandler(event)" initialize="button1_initializeHandler(event)"
		
		  >
	
	<fx:Script>
		<![CDATA[
			import mx.events.FlexEvent;
			import mx.managers.CursorManager;
			
			//public var maxDeltaX:int = 5;
			//public var maxDeltaY:int = 5;
			
			public var enableX:Boolean = true;
			public var enableY:Boolean = true;
			
			private var _originalStageMouseX:int = 0;
			private var _originalStageMouseY:int = 0;
			
			private var _originalStageX:int = 0;
			private var _originalStageY:int = 0;
			
			
			private var _originalSelfX:int = 0;
			private var _originalSelfY:int = 0;
			
			public function getXoffset():int{
				return 0;
			}
			public function getYoffset():int{
				return 0;
			}
			
			
			//private var  _parent:UIComponent = null;
			public function getCursor():Class {
				return null;
			}
			public function button1_mouseOverHandler(event:MouseEvent):void
			{
				CursorManager.setCursor( this.getCursor() );
			}
			
			public function button1_mouseOutHandler(event:MouseEvent):void
			{
				CursorManager.removeCursor(CursorManager.currentCursorID);
			}
			
			protected function button1_mouseDownHandler(event:MouseEvent):void
			{
				var p:Point = this.localToGlobal( new Point( 0,0 ) );
				this._originalStageX = p.x;
				this._originalStageY = p.y;
				
				
				this._originalStageMouseX = stage.mouseX;
				this._originalStageMouseY = stage.mouseY;
				
				this._originalSelfX = this.x;
				this._originalSelfY = this.y
				
				stage.addEventListener(MouseEvent.MOUSE_MOVE, _moving);
				stage.addEventListener(MouseEvent.MOUSE_UP, _stopmoving);
				
				this.dispatchEvent( new HandleEvent ( HandleEvent.MOVE_BEGIN ));
			}
			
			
			public var maxStageX:int = -1;
			public var minStageX:int = -1;
			public var maxStageY:int = -1;
			public var minStageY:int = -1;
			
			
			
			private function _moving(e:MouseEvent):void{
				
				
				var deltaX:int = this.getRestrictedDeltaX();
				var deltaY:int = this.getRestrictedDeltaY();
				
				if( this.enableX){
					this.x = this._originalSelfX + deltaX;}
				if( this.enableY){
					this.y = this._originalSelfY + deltaY;   }  
				
				this.dispatchEvent( new HandleEvent ( HandleEvent.MOVE_PROGRESS ));
				
			}
			
			private function _stopmoving(e:MouseEvent):void{
				stage.removeEventListener(MouseEvent.MOUSE_MOVE, _moving);
				stage.removeEventListener(MouseEvent.MOUSE_UP, _stopmoving);
				
				this.dispatchEvent( new HandleEvent ( HandleEvent.MOVE_END ));
			}
			
			protected function button1_initializeHandler(event:FlexEvent):void
			{
				this.width = 5;
				this.height = 5;
			}
			
			
			
			
			public function getDeltaY():int{
				if( this.enableY){
					var deltaY:int = stage.mouseY - this._originalStageMouseY;
					return deltaY;
				}else{
					return 0;
				}
			}
			
			
			public function getRestrictedDeltaY():int{
				if (this.enableY){
					var deltaY:int = stage.mouseY - this._originalStageMouseY;
					if ( this.maxStageY >= 0&& 
						stage.mouseY >= this.maxStageY ){
						deltaY = this.maxStageY - this._originalStageMouseY;
						if (deltaY < 0)
							deltaY = 0;
					}
					
					if ( this.minStageY >= 0 && 
						stage.mouseY <= this.minStageY ){
						deltaY = this.minStageY - this._originalStageMouseY;
						if (deltaY > 0)
							deltaY = 0;
					}
					return deltaY;
				}else{
					return 0;
				}
			}
			public function getRestrictedDeltaX():int{
				
				
				if (this.enableX){
					
					var deltaX:int = stage.mouseX - this._originalStageMouseX;
					
					if (deltaX > 0 ){
						if ( this.maxStageX >= 0&& 
							deltaX + this._originalStageX + width > this.maxStageX ){
							deltaX = this.maxStageX - this._originalStageX - width;
							
							if (deltaX < 0)
								deltaX = 0;
						}
					}else{
						if ( this.minStageX >= 0 &&
							this._originalStageX + deltaX < this.minStageX
							){
							deltaX =  this.minStageX - this._originalStageX;
							
							if (deltaX > 0)
								deltaX = 0;
						}
					}
					return deltaX;
				}else{
					return 0;
				}
			}
			public function getDeltaX():int{
				if (this.enableX){
					var deltaX:int = stage.mouseX - this._originalStageMouseX;
					
					return deltaX;
				}else{
					return 0;
				}
				
			}
			
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
</s:Button>
